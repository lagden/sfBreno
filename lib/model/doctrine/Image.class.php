<?php

/**
* Image
* 
* This class has been auto-generated by the Doctrine ORM Framework
* 
* @package    sfProject
* @subpackage model
* @author     Thiago Lagden
* @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
*/
class Image extends BaseImage
{
    public function getLarge()
    {
        return self::getItemVersion('large');
    }

    public function getMedium1()
    {
        return self::getItemVersion('medium1');
    }

    public function getMedium2()
    {
        return self::getItemVersion('medium2');
    }

    public function getSmall()
    {
        return self::getItemVersion('small');
    }

    public function getThumbnail()
    {
        return self::getItemVersion('thumbnail');
    }

    public function getSquare()
    {
        return self::getItemVersion('square');
    }

    public function save(Doctrine_Connection $conn = null)
    {
        // if there is no / in the filename, then it's a new file
        if ($this->file && strpos($this->file, '/') === false)
        {
            // No id, no FUN
            if ($this->isNew()) parent::save($conn);

            $recordDir = static::dir().$this->id;

            // if present, delete all the items in the folder
            if (is_dir($recordDir))
            {
                foreach (glob($recordDir . '/*') as $file)
                {
                    if (is_file($file)) @unlink($file);
                }
            }
            else
            {
                mkdir($recordDir, 0777, true);
            }

            // move the original file to the record folder
            $newFilename=$this->generateVersionFilename();
            rename($this->getUploadedOriginalFile(),$recordDir . '/' . $newFilename);

            $this->file = $this->id . '/' . $newFilename;

            // Replace the current versions
            $this->Versions->delete();
            $this->Versions = $this->generateVersions();
        }

        return parent::save($conn);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if ($this->id)
        {
            // Removing images when deleting the record
            $dir = static::dir().$this->id;
            sfToolkit::clearDirectory($dir);
            rmdir($dir);
        }
        return parent::delete();
    }

    public function generateFileFilename(sfValidatedFile $validator)
    {
        $file=$validator->getOriginalName();
        $ext=$validator->getOriginalExtension();
        $base=basename($file,$ext);
        $rnd=mt_rand();
        return "{$base}_{$rnd}{$ext}";
    }

    public function getUploadedOriginalFile()
    {
        return sfConfig::get('sf_upload_dir').'/'.$this->file;
    }

    public function getOriginalFile()
    {
        return static::dir().$this->file;
    }

    public function generateVersionFilename($version = 'original', $extension = null)
    {
        return 
            ($version ? $version : '').
            '.'.
            ($extension ? $extension : substr(strrchr($this->file, '.'), 1));
    }

    protected function generateVersions()
    {
        $versions = new Doctrine_Collection('ImageVersion');
        $formats = Doctrine_Core::getTable('Format')->findAll();

        $ds=DIRECTORY_SEPARATOR;
        $bin=sfConfig::get('sf_root_dir')."{$ds}bin{$ds}";
        exec("{$bin}imagick.sh {$this->id}",$out);

        foreach ($formats as $format)
        {
            foreach (glob(static::dir()."{$this->id}/{$format->slug}.*") as $file)
            {
                if (is_file($file))
                {
                    $file = basename($file);
                    $filename = "{$this->id}/$file";

                    // Generate the version
                    $version = new ImageVersion;
                    $version
                        ->setImage($this)
                        ->setFormat($format)
                        ->setFile($filename);
                    $versions->add($version);
                    break;
                }
            }
        }
        return $versions;
    }

    protected function getItemVersion($type="square")
    {
        foreach ($this->Versions as $version)
        {
            if($type==$version->Format->slug) return $version;
        }
        return;
    }

    static public function dir()
    {
        $ds=DIRECTORY_SEPARATOR;
        return sfConfig::get('sf_web_dir')."{$ds}estates{$ds}";
    }
}
