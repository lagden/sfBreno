<?php

/**
* Image
* 
* This class has been auto-generated by the Doctrine ORM Framework
* 
* @package    sfProject
* @subpackage model
* @author     Thiago Lagden
* @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
*/
class Image extends BaseImage
{
    public function fixImage($type)
    {
        return json_decode(json_encode(array("file"=>"{$this->id}/{$type}.jpg")));
    }
    public function getLarge()
    {
        return self::fixImage('large');
        // return self::getItemVersion('large');
    }

    public function getMedium1()
    {
        return self::fixImage('medium1');
        // return self::getItemVersion('medium1');
    }

    public function getMedium2()
    {
        return self::fixImage('medium2');
        // return self::getItemVersion('medium2');
    }
    
    public function getBanner()
    {
        return self::fixImage('banner');
        // return self::getItemVersion('banner');
    }

    public function getSmall()
    {
        return self::fixImage('small');
        // return self::getItemVersion('small');
    }

    public function getThumbnail()
    {
        return self::fixImage('thumbnail');
        // return self::getItemVersion('thumbnail');
    }

    public function getSquare()
    {
        return self::fixImage('square');
        // return self::getItemVersion('square');
    }
    
    public function save(Doctrine_Connection $conn = null)
    {
        // No id, no FUN
        if ($this->isNew())
        {
            parent::save($conn);
        }
        self::saveFile('file',true,'{*.jpg,*.jpeg,*.png,*.gif}');
        return parent::save($conn);
    }
    
    public function saveFile($name,$exec=false,$clean=false)
    {
        if ( $this->$name && (strpos($this->$name, '/') === false || $this->external == 1) )
        {
            $ds=DIRECTORY_SEPARATOR;
            $recordDir = static::dir().$this->id;

            if (is_dir($recordDir) && $clean!=false)
            {
                GetFile::cleanDir($recordDir,$clean);
            }
            else
            {
                mkdir($recordDir, 0777, true);
            }
            
            // move the original file to the record folder
            $uploaded=$this->getUploadedFile($name);
            $parts=pathinfo($uploaded);
            $newFilename = ($exec) ? "original.{$parts['extension']}" : basename($uploaded);
            //copy($uploaded,"{$recordDir}{$ds}{$newFilename}");
            rename($uploaded,"{$recordDir}{$ds}{$newFilename}");

            // Gera outros tamanhos
            if($exec)
            {
                // Replace the current versions
                $this->Versions->delete();
                $this->Versions = $this->generateVersions();
            }
            
            $this->external = 0;
            $this->$name = "{$this->id}/{$newFilename}";
        }
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        if ($this->id)
        {
            // Removing images when deleting the record
            $dir = static::dir().$this->id;
            sfToolkit::clearDirectory($dir);
            rmdir($dir);
        }
        return parent::delete();
    }

    public function generateFileFilename(sfValidatedFile $validator)
    {
        $file=$validator->getOriginalName();
        $ext=$validator->getOriginalExtension();
        $base=basename($file,$ext);
        $rnd=mt_rand();
        return "{$base}_{$rnd}{$ext}";
    }
    
    // pego o arquivo com o path orgiginal
    public function getUploadedFile($name)
    {
        return GetFile::getUploadBasePath().$this->$name;
    }

    public function getOriginalFile()
    {
        return static::dir().$this->file;
    }

    protected function generateVersions()
    {
        $versions = new Doctrine_Collection('ImageVersion');
        $formats = static::loadFormats();

        $ds=DIRECTORY_SEPARATOR;
        $bin=sfConfig::get('sf_root_dir')."{$ds}bin{$ds}";
        exec("{$bin}imagick.sh {$this->id}",$out);

        foreach ($formats as $format)
        {
            foreach (glob(static::dir()."{$this->id}/{$format->slug}.*") as $file)
            {
                if (is_file($file))
                {
                    $file = basename($file);
                    $filename = "{$this->id}/$file";

                    // Generate the version
                    $version = new ImageVersion();
                    $version
                        ->setImage($this)
                        ->setFormat($format)
                        ->setFile($filename);
                    $versions->add($version);
                    break;
                }
            }
        }
        return $versions;
    }
    
    static protected function loadFormats()
    {
        $fmts = Doctrine_Core::getTable('Format')->findAll();
        if($fmts->count()==0)
        {
            $fmts = new Doctrine_Collection('Format');
            $formats = array('Original','Large','Medium1','Medium2','Banner','Small','Thumbnail','Square');
            foreach($formats as $format)
            {
                $f = new Format();
                $f->name=$format;
                $f->save();
                $fmts->add($f);
            }
        }
        return $fmts;
    }

    protected function getItemVersion($type="square")
    {
        foreach ($this->Versions as $version)
        {
            if($type==$version->Format->slug) return $version;
        }
        return;
    }

    static public function dir()
    {
        $ds=DIRECTORY_SEPARATOR;
        return sfConfig::get('sf_web_dir')."{$ds}estates{$ds}";
    }
}
