<?php

/**
* EstateTable
*
* This class has been auto-generated by the Doctrine ORM Framework
*/
class EstateTable extends Doctrine_Table
{
		static public $valor_venda = array(
				'' => 'Indiferente',
				'< 400000' => 'até R$400.000',
				'BETWEEN 400000 AND 800000' => 'de R$400.000 até R$800.000',
				'BETWEEN 800000 AND 1200000' => 'de R$800.000 até R$1.200.000',
				'BETWEEN 1200000 AND 2000000' => 'de R$1.200.000 até R$2.000.000',
				'> 2000000' => 'acima de R$2.000.000',
		);

		static public $valor_aluguel = array(
				'' => 'Indiferente',
				'< 2000' => 'até R$2.000',
				'BETWEEN 2000 AND 3500' => 'de R$2.000 até R$3.500',
				'BETWEEN 3500 AND 5000' => 'de R$3.500 até R$5.000',
				'> 5000' => 'acima de R$5.000',
		);

		static public $area = array(
				'' => 'Indiferente',
				'< 50' => 'até 50m²',
				'BETWEEN 50 AND 100' => 'de 50m² até 100m²',
				'BETWEEN 100 AND 150' => 'de 100m² até 150m²',
				'BETWEEN 150 AND 200' => 'de 150m² até 200m²',
				'BETWEEN 200 AND 250' => 'de 200m² até 250m²',
				'BETWEEN 250 AND 300' => 'de 250m² até 300m²',
				'> 300' => 'acima de 300m²',
		);

		static public $numbers = array(
				'1' => '1',
				'2' => '2',
				'3' => '3',
				'4' => '4 ou mais'
		);

		static public $sorting = array(
				'id' => 'Ordernar resultados por...',
				'price_sale' => 'Preço Venda',
				'price_rent' => 'Preço Aluguel',
				//'area_util' => 'Área Útil',
				'neighborhood_id' => 'Bairro',
				'quartos' => 'Nº de Quartos',
				'vagas' => 'Nº de Vagas na garagem',
		);

		public function getSorting()
		{
				return self::$sorting;
		}

		public function getValorVenda()
		{
				return self::$valor_venda;
		}

		public function getValorAluguel()
		{
				return self::$valor_aluguel;
		}

		public function getArea()
		{
				return self::$area;
		}

		public function getNumbers()
		{
				return self::$numbers;
		}

		// Instancia
		public static function getInstance()
		{
				return Doctrine_Core::getTable('Estate');
		}

		public function getByTag($tag, $active=1, Doctrine_Query $q = null)
		{
				if (null === $q) $q = $this->getListQuery();
				$alias=$q->getRootAlias();
				$q->innerJoin("{$alias}.Tags t");
				$q->andWhere("t.slug = ?", $tag);
				$q->andWhere("{$alias}.ativo = ?", $active);
				$q->orderBy("{$alias}.id DESC");
				return $q;
		}

		// Pega imoveis aleatóriamente
		public function getRnd($limit=12, Doctrine_Query $q = null)
		{
				if (null === $q) $q = $this->getListQuery();
				$alias=$q->getRootAlias();

				$rand = (APP_ENV == 'dev') ? 'id' : 'RAND()';

				$q->andWhere("{$alias}.ativo = ?", 1);
				// $q->orderBy("RAND()");
				$q->orderBy($rand);
				$q->limit($limit);

				return $q;
		}

		// Pega imoveis em destaque
		public function getDestaques($limit=false,Doctrine_Query $q = null)
		{
				if (null === $q) $q = $this->getListQuery();
				$alias=$q->getRootAlias();

				$q->andWhere("{$alias}.destaque = ?", 1);
				$q->andWhere("{$alias}.ativo = ?", 1);
				$q->orderBy("{$alias}.ordem");
				if($limit) $q->limit($limit);
				return $q;
		}

		// Filtro Frontend
		public function getFrontListFilter(array $filters, Doctrine_Query $q = null)
		{
				if (null === $q) $q = $this->getListQuery();
				$alias=$q->getRootAlias();

				if (isset($filters))
				{
						foreach($filters as $k => $v)
						{
								switch($k)
								{
										case "type_id":
											$q->andWhere("{$alias}.{$k} = ?", $v);
											break;

										case "Disponibilidades":
											$q->innerJoin("{$alias}.$k j");
											$q->andWhere("j.id = ?", $v);
											break;

										case "valor":
											if(isset($filters['Disponibilidades']))
											{
												$ors = [];
												if ($filters['Disponibilidades'] == 1) {
													$filters['valor'] = $filters['valor'] * 1000;
													$filters['valor_max'] = $filters['valor_max'] * 1000;
													array_push($ors, "{$alias}.price_sale BETWEEN {$filters['valor']} AND {$filters['valor_max']}");
													if($filters['valor_max'] === 2000000) {
														array_push($ors, "{$alias}.price_sale >= {$filters['valor_max']}");
													}
												} else {
													array_push($ors, "{$alias}.price_rent BETWEEN {$filters['valor']} AND {$filters['valor_max']}");
													if($filters['valor_max'] === 20000) {
														array_push($ors, "{$alias}.price_rent >= {$filters['valor_max']}");
													}
												}
												$q->andWhere(implode(' OR ', $ors));
											}
											break;

										case "neighborhood_id":
											if(isset($filters['neighborhood_id']) && $v) {
												// $q->andWhereIn("{$alias}.{$k}", $v);
												$q->andWhere("{$alias}.{$k} = ?", $v);
											}
											break;

										case "suites":
										case "quartos":
										case "banheiros":
										case "vagas":
											if($v && is_array($v)) {
												$ors = [];
												foreach ($v as $vs) {
													if ($vs == 4) {
														array_push($ors, "{$alias}.{$k} >= $vs");
													} else {
														array_push($ors, "{$alias}.{$k} = $vs");
													}
												}
												$q->andWhere(implode(' OR ', $ors));
											}
											break;

										case "area":
											$ors = [];
											array_push($ors, "{$alias}.area_total BETWEEN {$filters['area']} AND {$filters['area_max']}");
											if($filters['area_max'] === 10000) {
												array_push($ors, "{$alias}.area_total >= {$filters['valor_max']}");
											}
											$q->andWhere(implode(' OR ', $ors));
											break;
								}
						}
				}

				// Ativo
				$q->andWhere("{$alias}.ativo = ?", 1);

				// Sort
				$order=sfContext::getInstance()->getUser()->getAttribute(sfConfig::get('order_by'),'id');
				$direction=sfContext::getInstance()->getUser()->getAttribute(sfConfig::get('order_by_direction'),'DESC');
				$q->orderBy("{$alias}.{$order} $direction");

				return $q;
		}

		// Filtro Backend
		public function getListFilter(array $filters, Doctrine_Query $q = null)
		{
				return Filter::query($filters,sfContext::getInstance()->getUser()->getAttribute('search_list.fields'),static::getInstance());
		}

		public function getListQuery(Doctrine_Query $q = null)
		{
				if(null === $q)$q = $this->createQuery('a');
				return $q;
		}
}